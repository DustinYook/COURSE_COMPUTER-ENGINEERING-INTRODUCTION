# 프로그램 목적 : 리스트에 대한 실습 -> 시험에 출제!

# 참고) 파이썬에는 배열이 존재하지 않는다.
#       배열은 사이즈를 미리 선언해야 한다 -> 고정크기
#       C++에서는 이를 보완하기 위해 벡터라는 자료구조가 제공 -> 가변크기
# 참고) 파이썬의 리스트의 사용방법은 앞의 문자열과 동일하다

slist = []  # 공백리스트

# 1) 전체 원소 출력하는 법
print(slist, '==', slist[::])
# slist라고 쓰면 전체 출력
# slist[시작인덱스:끝인덱스:간격]
# 생략 시 시작은 처음인덱스, 끝은 마지막인덱스, 간격은 1로 부여
print(len(slist))  # len()은 리스트의 길이 값을 리턴
print("=" * 50)

# 2) 리스트에 데이터 삽입하는 법
# append()는 맨 뒤에 추가, insert()는 지정된 인덱스에 끼워넣기
slist.append('A')  # append() : 리스트의 맨 뒤에 원소를 추가
slist.append('B')
slist.append('C')
slist.append('E')
slist.append('X')
print('내용 : ', slist, ', 길이 : ', len(slist))
slist.insert(3, 'D')  # insert(인덱스번호, 넣을 자료) -> 3번 인덱스에 'D'를 추가 (인자순서 조심!)
print('내용 : ', slist, ', 길이 : ', len(slist))
print("=" * 50)

# 3) 리스트에서 데이터 삭제하는 법
# remove()는 명시된 데이터 삭제, pop()은 해당 인덱스의 데이터를 삭제
slist.remove('X')  # remove()는 해당 데이터를 리스트에서 삭제
print('내용 : ', slist, ', 길이 : ', len(slist))
slist.pop(3)  # pop()은 해당 인덱스의 데이터를 리스트에서 삭제
print('내용 : ', slist, ', 길이 : ', len(slist))
# 대부분의 언어에서 데이터 삭제는 delete(), remove(), drop() 중 하나이다!
print("=" * 50)

# 앞서 문자열과 동일한 것이 리스트에서도 적용 -> 시험 : 출력결과 예측
# 4-1) 단일원소 출력
print(slist[-1])  # 인덱스 -1은 뒤에서부터 첫 번째, 즉, 마지막 원소를 의미!
print(slist[-3])  # 결과값 : B
print("=" * 50)

# 4-2) 범위지정 원소 출력 -> 시작과 끝만 지정하는 경우
print(slist[0:2])  # 0번 인덱스부터 2을 포함하여 2개 출력 -> ['A', 'B']
print(slist[0:100])  # 주의) 파이썬은 인덱스 범위 벗어나도 마지막 원소까지만 출력 -> 에러 없음!
print(slist[:2])  # 주의) 시작 인덱스를 비워두면 디폴트로 0이 들어감
print(slist[2:])  # 주의) 마지막 인덱스를 비워두면 디폴트로 마지막 원소의 인덱스가 들어감
print(slist[-3:])  # 의미 : 뒤에서부터 앞으로 3칸 와서 마지막 원소까지 출력 -> ['B', 'C', 'E']
print("=" * 50)

# 4-3) 간격지정 원소 출력 -> 시작, 끝, 간격
slist.insert(3, 'D')  # 3번 원소에 'D'를 넣음
print(slist[::2])  # 처음 원소부터 마지막 원소까지 2씩 건너뛰면서 출력
# 리스트에서 뽑아온 결과를 변수에 저장할 수 있다는 파이썬의 장점!
alist = slist[::2]  # 홀수번째 원소들만 추출
print(alist)
blist = slist[1::2]  # 짝수번째 원소들만 추출
print(blist)